import os
import openai
import json
from lib.utils import parse_json

system_content = "You are a travel agent. Be descriptive and helpful."
user_content = "Tell me about San Francisco"

MODEL_NAME = "mistralai/Mixtral-8x7B-Instruct-v0.1"

API_KEYS = [
    "2e66d1acc664f894806604050fe69ab30b4b5ceab4151e4bea91f06351fa789e",
    "5f24e54ea9f0596ad93b38a9d197f59712185c89b347c9cd0141e8158f28dc1f",
    "425afb814b27cb3804aa4ff0a4dbcb586b6e48486cd3d50fa90d94efacf35bb7",
    "d6726a5da8f54f920a42034705a851d2dd8d5cc0168a5bd7a32c8584fdfe4361",
    "4e886963a4f942ad13f39037e6806f1900587234d0cf97c585aedebfd7124d90",
    "efd6c07b90ce1f29aa173436e16e92921f15910a092b47e7fcc1cd3ecc0524c0",
    "73e412550df139dde94ed3c69a450e425d908cc6fbb2bccbcefe5446a5b73f84",
]

CLIENTS = [
    openai.OpenAI(
        api_key=api_key,
        base_url="https://api.together.xyz/v1",
    )
    for api_key in API_KEYS
]

N_CLIENTS = len(API_KEYS)
current_cliend_index = 0


def get_answer(messages, temperature=0.7):
    global current_cliend_index, N_CLIENTS, MODEL_NAME

    client = CLIENTS[current_cliend_index]
    current_cliend_index = (current_cliend_index + 1) % N_CLIENTS

    chat_completion = client.chat.completions.create(
        model=MODEL_NAME,
        messages=messages,
        temperature=temperature,
        # max_tokens=1024,
    )

    answer = chat_completion.choices[0].message.content
    answer = parse_json(answer)
    return answer


def create_background_prompt(query, theme, background_color):
    system_prompt = f"""Ты являешься цифровым дизайнером, который использует Stable Diffusion для генерации фоновых изображений для рекламных баннеров и презентаций. Твоя задача - по запросу пользователя и выбранной теме рекламного баннера придумать два текста: prompt - текст на английском языке, описывающий генерируемое изображение фона для Stable Diffusion и negative_prompt - текст на английском языке, описывающий нежелательные черты и элементы генерируемого изображения фона.

Помни: сгенерированный фон будет вставлен в рекламный баннер, сгенерированный фон должен соответствовать запроосу пользователя и выбранной теме. Фон не должен быть сложным, он должен стремиться быть более абстрактным.

Если запрос пользователя и тема противоречат друг другу, то ты должен отдавать предпочтение запросу пользователя.

Ответ должен быть исключительно в формате JSON с полями: prompt, negative_prompt. Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"

Заданная тема:
\"\"\"{theme}\"\"\"

Цвет тон фона: {background_color}
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)

    json_answer = json.loads(llm_answer)

    return json_answer


def change_background_prompt(
    query, theme, previous_background_prompt, background_color
):
    system_prompt = f"""Ты являешься цифровым дизайнером, который использует Stable Diffusion для генерации фоновых изображений для рекламных баннеров и презентаций. На данном этапе уже есть сгенерированное изображение фона, которое пользователь хочет изменить. Твоя задача - по запросу пользователя и выбранной теме рекламного баннера изменить существующий промпт, чтобы он соответствовал запросу пользователя и выбранной теме. Для этого ты должен придумать два текста: prompt - текст на английском языке, описывающий генерируемое изображение фона для Stable Diffusion и negative_prompt - текст на английском языке, описывающий нежелательные черты и элементы генерируемого изображения фона.

Помни: сгенерированный фон будет вставлен в рекламный баннер, сгенерированный фон должен соответствовать запроосу пользователя и выбранной теме. Фон не должен быть сложным, он должен стремиться быть более абстрактным.

Если запрос пользователя и тема противоречат друг другу, то ты должен отдавать предпочтение запросу пользователя.

Ответ должен быть исключительно в формате JSON с полями: prompt, negative_prompt. Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"

Заданная тема:
\"\"\"{theme}\"\"\"

Предыдущий промпт:
\"\"\"{previous_background_prompt}\"\"\"

Цвет тон фона: {background_color}
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)
    json_answer = json.loads(llm_answer)

    return json_answer


def generate_image_prompt(query, theme):
    system_prompt = f"""Ты являешься цифровым дизайнером, который использует Stable Diffusion для генерации изображений для рекламных баннеров и презентаций. Твоя задача - по запросу пользователя и выбранной теме рекламного баннера придумать два текста: prompt - текст на английском языке, описывающий генерируемое изображение для Stable Diffusion и negative_prompt - текст на английском языке, описывающий нежелательные черты и элементы генерируемого изображения. 

Так же учти, что после генерации изображения, задний фон изображения будет вырезан с помощью отдельной нейронной сети, поэтому передний фон и задний фон должны отчётливо выделяться.

Помни: сгенерированное изображение будет вставлено в рекламный баннер, сгенерированное изображение должно соответствовать запроосу пользователя и выбранной теме. Сгенерированное изображение не должно быть сложным. Сгенерированное изображение должно быть похожим на векторную иллюстрацию или на другие графические элементы, присущие баннерам и презентациям. 

Если запрос пользователя и тема противоречат друг другу, то ты должен отдавать предпочтение запросу пользователя.

Ответ должен быть исключительно в формате JSON с полями: prompt, negative_prompt. Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"

Заданная тема:
\"\"\"{theme}\"\"\"
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)

    json_answer = json.loads(llm_answer)

    return json_answer


def change_image_propmt(previous_prompt, query, theme):
    system_prompt = f"""Ты являешься цифровым дизайнером, который использует Stable Diffusion для генерации изображений для рекламных баннеров и презентаций. Твоя задача - по запросу пользователя и выбранной теме рекламного баннера изменить предыдущий промпт сгенерированного изображения. Для этого ты должен придумать два текста: prompt - текст на английском языке, описывающий генерируемое изображение для Stable Diffusion и negative_prompt - текст на английском языке, описывающий нежелательные черты и элементы генерируемого изображения. 

Так же учти, что после генерации изображения, задний фон изображения будет вырезан с помощью отдельной нейронной сети, поэтому передний фон и задний фон должны отчётливо выделяться.

Помни: сгенерированное изображение будет вставлено в рекламный баннер, сгенерированное изображение должно соответствовать запроосу пользователя и выбранной теме. Сгенерированное изображение не должно быть сложным. Сгенерированное изображение должно быть похожим на векторную иллюстрацию или на другие графические элементы, присущие баннерам и презентациям. 

Если запрос пользователя и тема противоречат друг другу, то ты должен отдавать предпочтение запросу пользователя.

Ответ должен быть исключительно в формате JSON с полями: prompt, negative_prompt. Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"

Заданная тема:
\"\"\"{theme}\"\"\"

Предыдущий промпт:
\"\"\"{previous_prompt}\"\"\"
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)

    json_answer = json.loads(llm_answer)

    return json_answer


def get_theme_object(query):
    system_prompt = f"""Ты являешься профессиональным цифровым дизайнером, который создаёт дизайн для рекламных баннеров и для слайдов презентаций. Твоя задача - по запросу пользователя придумать тему дизайна (описание баннера и цвета), а именно придумать:
- description: концепция дизайна баннера, описание того, что из себя представляет баннер, который хочет создать пользователь. Прояви здесь креативность.
- background_color: цвет фона баннера.
- button_color: цвет кнопки на баннере.
- button_text_color: цвет текста на кнопке.
- header_text_color: цвет текста на заголовке баннера.
- text_color: цвет остального текста на баннере.

Помни: цвета должны сочетаться друг с другом стилистически. Пользователь может ввести не полное описание темы, а лишь заголовок баннера, в таком случае тебе нужно проявить креативность и всё равно создать дизайн.

Все цвета должны быть в формате HEX (Пример: #1b20d3)

Ответ должен быть исключительно в формате JSON с полями: description, background_color, button_color, button_text_color, header_text_color, text_color. Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)

    json_answer = json.loads(llm_answer)

    return json_answer


def structure_query(query):
    system_prompt = f"""Ты являешься профессиональным аналитиком текстов. Твоя задача - по запросу пользователя определить:
1. element - какой элемент пользователь хочет изменить. Это может быть:
    - background: фон баннера.
    - button: кнопка баннера.
    - header: заголовок баннера.
    - text: текст баннера.
    - image: изображение баннера.
    - none: пользователь ничего не хочет менять в баннере.
2. action - как именно он хочет изменить выбранный элемент. Это может быть:
    - set: дать элементу новое значение
    - change: изменить существующий элемент
    - delete: удалить выбранный элемент
    - none: пользователь ничего не хочет менять в баннере.

Ответ должен быть исключительно в формате JSON с полями: element, action. Значение поля element должно быть одним из: background, button, header, text, image, none. Значение поля action должно быть одним из: set, change, delete, none.
Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)

    json_answer = json.loads(llm_answer)

    return json_answer


def generate_text(query, theme, header):
    system_prompt = f"""Ты являешься профессиональным цифровым дизайнером, который создаёт дизайн для рекламных баннеров и для слайдов презентаций. Твоя задача - на основе запроса пользователя, темы дизайна и заголовка баннера придумать побочный текст баннера, а именно нужно придумать:
- text: побочный текст баннера.

Помни: цвета должны сочетаться друг с другом стилистически. Пользователь может ввести не полное описание темы, а лишь заголовок баннера, в таком случае тебе нужно проявить креативность и всё равно создать дизайн.

Если запрос пользователя и тема противоречат друг другу, то ты должен отдавать предпочтение запросу пользователя.

Следуй инструкциям из запроса пользователя.

Ответ должен быть исключительно в формате JSON с полями: text. Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"

Тема дизайна:
\"\"\"{theme}\"\"\"

Заголовок баннера:
\"\"\"{header}\"\"\"
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)

    json_answer = json.loads(llm_answer)

    return json_answer


def change_text(query, theme, prev_text, prev_text_color, header):
    system_prompt = f"""Ты являешься профессиональным цифровым дизайнером, который создаёт дизайн для рекламных баннеров и для слайдов презентаций. На данном этапе на баннере уже имеется побочный текст, который пользователь хочет изменить. Твоя задача - на основе запроса пользователя, темы дизайна, предыдущего текста, предыдущего цвета текста и заголовка баннера придумать побочный текст баннера, а именно нужно придумать:
- text: побочный текст баннера.
- text_color: цвет побочного текста баннера в формате HEX (Пример: #1b20d3).

Помни: цвета должны сочетаться друг с другом стилистически. Пользователь может ввести не полное описание темы, а лишь заголовок баннера, в таком случае тебе нужно проявить креативность и всё равно создать дизайн.

Если запрос пользователя и тема противоречат друг другу, то ты должен отдавать предпочтение запросу пользователя.

Не изменяй те поля, которые пользователь не упоминает в запросе. Следуй инструкциям из запроса пользователя.

Ответ должен быть исключительно в формате JSON с полями: text, text_color. Помни, твой ответ должен быть без ошибок обработан с помощью json.loads (Python язык программирования).
"""

    user_prompt = f"""Запрос пользователя:
\"\"\"{query}\"\"\"

Тема дизайна:
\"\"\"{theme}\"\"\"

Заголовок баннера:
\"\"\"{header}\"\"\"

Заголовок баннера:
\"\"\"{header}\"\"\"

Предыдущий текст:
\"\"\"{prev_text}\"\"\"

Предыдущий цвет текста:
\"\"\"{prev_text_color}\"\"\"
"""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    llm_answer = get_answer(messages)

    json_answer = json.loads(llm_answer)

    return json_answer
